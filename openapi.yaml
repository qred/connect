openapi: 3.0.0
servers:
  - url: 'https://api.qred.com/loans/v1'
    description: Live Server
  - url: 'https://sandbox.qred.com/loans/v1'
    description: Sandbox Server
info:
  description: |
    Qred Connect - API Documentation
    ## Introduction
    Qred's Partner API "Qred Connect" allows our partners to directly connect to Qred's services. As a partner you may submit an application and request instant approval for a business loan. Our API allows our partners to integrate Qred's business loan application in a seamless and effortless way.
    ### Technical Specifications
    Notice that for Qred Connect:

      * Qred's APIs are built according to industry standard practices for third-party RESTful web services
      * Strong validation, authentication & encryption
      * Entry points for requests are sent via HTTP over SSL (all information is encrypted)

    ### How to get started
    There are two environments - Test and Production.

      * Sandbox: https://sandbox.qred.com
      * Production: https://api.qred.com

    ## Contact
    To get in touch with Qred either send us an email at <partner@qred.com> or call us at [+46 8 474 46 62](tel:4684744662)
    ## Terms of Service
    The terms of service will be clarified once you have a partner agreement with Qred.
  version: 0.2.0
  title: Qred Connect
  termsOfService: '#section/Terms-of-Service'
  contact:
    email: techsupport@qred.com
    url: '#section/Contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://qred.com/img/qred-logo-mobile-green.png'
tags:
  - name: applications
    description: Create loan applications on behalf of your customers
paths:
  /applications:
    post:
      tags:
        - applications
      summary: Add loan application
      operationId: add
      description: |-
        Send a loan application to Qred. 
        ### Full application request
        You can also send in further fields to simplify the qualification of the of the customer application.
        The default is the reduced request. By adding `$type:"full"` you can send in further information.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ApplicationRequest'
                - $ref: '#/components/schemas/FullApplicationRequest'
              discriminator:
                propertyName: $type
                mapping:
                  simple: '#/components/schemas/ApplicationRequest'
                  full: '#/components/schemas/FullApplicationRequest'
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationCreateResponse'
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationErrorResponse'
      security:
        - JWT: []
      x-code-samples:
        - lang: 'C#'
          source: |+
            /**
            create a new .net project:

            ```
            dotnet new console -o ./
            ```

            add Identity Model package:

            ``` 
            dotnet add package IdentityModel 
            ```

            You should end up with something like:

            ```
            <Project Sdk="Microsoft.NET.Sdk">

              <PropertyGroup>
                <OutputType>Exe</OutputType>
                <TargetFramework>netcoreapp2.2</TargetFramework>
              </PropertyGroup>
              <ItemGroup>
                <PackageReference Include="IdentityModel" Version="3.10.4" />
              </ItemGroup>

            </Project>
            ```

            */
            using System;
            using System.Collections.Generic;
            using System.Net.Http;
            using System.Text;
            using System.Threading.Tasks;
            using IdentityModel.Client;
            using Newtonsoft.Json;
            using Newtonsoft.Json.Serialization;

            namespace AwesomeBusinessApp
            {
              public class TypeNameSerializationBinder : ISerializationBinder
              {
                public TypeNameSerializationBinder()
                {
                  var typeNames = new Dictionary<Type, string>
                        {
                            { typeof(ApplicationRequest),"simple" },
                            { typeof(ApplicationApplicant),"simple" },
                            { typeof(ApplicationOrganization),"simple" },
                        };
                  foreach (var typeName in typeNames)
                  {
                    Map(typeName.Key, typeName.Value);
                  }
                }

                readonly Dictionary<Type, string> typeToName = new Dictionary<Type, string>();

                public void Map(Type type, string name) => this.typeToName.Add(type, name);

                public void BindToName(Type serializedType, out string assemblyName, out string typeName)
                {
                  var name = typeToName.GetValueOrDefault(serializedType, null);
                  if (name != null)
                  {
                    assemblyName = null;
                    typeName = name;
                  }
                  else
                  {
                    assemblyName = null;
                    typeName = null;
                  }
                }

                public Type BindToType(string assemblyName, string typeName) => null;
              }

              public class ApplicationApplicant
              {
                public string Email { get; set; }

                public string Phone { get; set; }

                public string NationalIdentificationNumber { get; set; }

                public string GivenName { get; set; }

                public string AdditionalName { get; set; }

                public string FamilyName { get; set; }
              }

              public class ApplicationOrganization
              {
                public string NationalOrganizationNumber { get; set; }

                public string Email { get; set; }

                public string Phone { get; set; }

                public string Url { get; set; }
              }

              public class ApplicationRequest
              {
                public decimal? Amount { get; set; }

                public string PromoCode { get; set; }

                public decimal? Term { get; set; }

                public string PurposeOfLoan { get; set; }

                public ApplicationOrganization Organization { get; set; }

                public ApplicationApplicant Applicant { get; set; }

                public List<UploadBase64File> Files { get; set; }

                /// <summary>
                /// Get the JSON string presentation of the application request
                /// </summary>
                /// <returns>JSON string presentation of the application request</returns>
                public string ToJson()
                {
                  return JsonConvert.SerializeObject(this, Formatting.Indented, new JsonSerializerSettings
                  {
                    SerializationBinder = new TypeNameSerializationBinder(),
                    TypeNameHandling = TypeNameHandling.Objects,
                    ContractResolver = new DefaultContractResolver
                    {
                      NamingStrategy = new CamelCaseNamingStrategy
                      {
                        OverrideSpecifiedNames = false
                      }
                    }
                  });
                }
              }

              public class UploadBase64File
              {
                public List<string> EncodingFormat { get; set; }

                public string Filename { get; set; }

                public byte[] Base64Content { get; set; }
              }
              public class ApplicationCreateResponse
              {
                public string Id { get; set; }
                public string Url { get; set; }

                /// <summary>
                /// Get the string presentation of the object
                /// </summary>
                /// <returns>String presentation of the object</returns>
                public override string ToString()
                {
                  var sb = new StringBuilder();
                  sb.Append("ApplicationCreateResponse {\n");
                  sb.Append("  Id: ").Append(Id).Append("\n");
                  sb.Append("  Url: ").Append(Url).Append("\n");
                  sb.Append("}\n");
                  return sb.ToString();
                }
              }
              public class Program
              {
                public static void Main(string[] args) => MainAsync().GetAwaiter().GetResult();

                private static async Task MainAsync()
                {
                  // discover endpoints from metadata
                  var disco = await new DiscoveryClient("https://identity.qred.com").GetAsync();
                  if (disco.IsError)
                  {
                    Console.Error.WriteLine("Error {0}", disco.Error);
                    Console.Error.WriteLine("ErrorType {0}", disco.ErrorType);
                    Console.Error.WriteLine(String.Join(", ",
                        "Exception",
                        "Message " + disco.Exception?.Message,
                        "Source " + disco.Exception?.Source,
                        "StackTrace " + disco.Exception?.StackTrace));
                    return;
                  }

                  // request token
                  var tokenClient = new TokenClient(disco.TokenEndpoint, "YOUR CLIENT ID", "YOUR API KEY");
                  var tokenResponse = await tokenClient.RequestClientCredentialsAsync("connect");

                  if (tokenResponse.IsError)
                  {
                    Console.WriteLine(tokenResponse.Error);
                    return;
                  }

                  Console.WriteLine(tokenResponse.Json);
                  Console.WriteLine("\n\n");

                  // call api
                  var client = new HttpClient();
                  client.DefaultRequestHeaders.Add("api_key", tokenResponse.AccessToken);
                  var payload = new ApplicationRequest
                  {
                    Amount = 5000,
                    Organization = new ApplicationOrganization { Email = "admin@a-company.com", NationalOrganizationNumber = "2344473928" },
                    Applicant = new ApplicationApplicant { Email = "joe.smith@a-company.com", Phone = "+4688675309", NationalIdentificationNumber = "2344473928" }
                  };
                  Console.WriteLine(payload.ToJson());
                  var response = await client.PostAsync("https://api.qred.com/loans/v1/applications", new StringContent(payload.ToJson(), Encoding.UTF8, "application/json"));
                  if (!response.IsSuccessStatusCode)
                  {
                    Console.WriteLine(response.StatusCode);
                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(content);
                  }
                  else
                  {
                    var content = await response.Content.ReadAsStringAsync();
                    var applicationResponse = JsonConvert.DeserializeObject<ApplicationCreateResponse>(content);
                    Console.WriteLine(applicationResponse);
                  }
                }
              }
            }


  '/applications/{applicationId}':
    get:
      summary: Status of loan application
      operationId: get
      description: Get summary information about loan application from Qred
      tags:
        - applications
      parameters:
        - name: applicationId
          in: path
          description: The id of the application
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found application with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDecisionApproved'
        '210':
          description: Found application with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDecisionManualProcess'
        '211':
          description: Found application with id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationDecisionRejected'
        '404':
          description: Application not found
      security:
        - JWT: []
components:
  schemas:
    AdditionalName:
      type: string
      example: Daniels
      description: 'An additional name for a Person, can be used for a middle name.'
    Amount:
      type: number
      example: 15000
      description: |-
        ### Amount
        The amount in local currency that the company wants to borrow. 
        ### Abbreviation
        Expected to be the full amount, i.e. 1 000 implies 1 thousand in the local currency.
        ### Currency code of amount?
        Note that the currency is specified when issued API key.
    ApplicationApplicant:
      required:
        - email
        - $type
      properties:
        email:
          type: string
          format: email
          example: joe.smith@a-company.com
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        nationalIdentificationNumber:
          $ref: '#/components/schemas/NationalIdentificationNumber'
        givenName:
          $ref: '#/components/schemas/GivenName'
        additionalName:
          $ref: '#/components/schemas/AdditionalName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        $type:
          type: string
          example: simple
          description: Note that `$type` must be `full` in order to send in further information.
    ApplicationCreateResponse:
      properties:
        id:
          type: string
          example: APP-32444
        url:
          type: string
          format: uri
          example: 'https://api.qred.com/loans/v1/applications/APP-32444'
    ApplicationDecision:
      required:
        - decision
      properties:
        decision:
          $ref: '#/components/schemas/ApplicationDecisionType'
    ApplicationDecisionApproved:
      allOf:
        - $ref: '#/components/schemas/ApplicationDecision'
        - type: object
          properties:
            amount:
              type: number
            term:
              type: number
            campaign:
              type: string
            offerUrl:
              type: string
              format: uri
              description: Url for the user to see and accept the offer given by Qred
      example:
        type: Approved
        amount: 5000
        term: 12
        campaign: Spring Campaign
        offerUrl: 'https://qred.com/link-to-offer?id=offer-id'
    ApplicationDecisionManualProcess:
      allOf:
        - $ref: '#/components/schemas/ApplicationDecision'
      example:
        type: ManualProcess
    ApplicationDecisionRejected:
      allOf:
        - $ref: '#/components/schemas/ApplicationDecision'
        - type: object
          properties:
            rejectReason:
              type: string
      example:
        type: Denied
        rejectReason: Due to previous problems with payments we regret that we have to reject the application.
    ApplicationDecisionType:
      type: string
      example: Approved
      enum:
        - Approved
        - Denied
        - ManualProcess
    ApplicationErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationErrorResponseItem'
      example:
        errors:
          - property: amount
            description: Amount is a required field
          - property: organization.organizationId
            description: organizationId is a required field
          - property: applicant.email
            description: email is a required field
    ApplicationErrorResponseItem:
      properties:
        property:
          type: string
          example: amount
        description:
          type: string
          example: Amount is a required field
    ApplicationOrganization:
      required:
        - nationalOrganizationNumber
        - $type
      properties:
        nationalOrganizationNumber:
          type: string
          example: '2344473928'
          description: |
            The national organization number is the "number" used to identify organizations in a country. In Sweden that would be [organization number](https://bolagsverket.se/en). In Denmark you have [CVR-number](https://datacvr.virk.dk/data/?language=en-gb). In Finland it is the [Business ID](https://www.ytj.fi/en/index/businessid.html). In the Netherlands it is [KVK number](https://www.kvk.nl/english/)
            ### Why not VAT ID?
            Note that a company can in some cases have many VAT numbers. 
            ### What about DUNS, LEI codes, et.c. ?
            We only expect the national organization number, not the more international numbers (since not all companies in a country has an international id).
        email:
          type: string
          format: email
          example: invoice@a-company.com
          description: Company email
        phone:
          $ref: '#/components/schemas/PhoneNumber'
        url:
          type: string
          format: uri
          example: 'http://www.a-company.com'
          description: Url to the organization site.
        $type:
          type: string
          example: simple
          description: Note that `$type` must be `full` in order to send in further information.
    ApplicationPoliticallyExposedPerson:
      properties:
        nationalIdentificationNumber:
          $ref: '#/components/schemas/NationalIdentificationNumber'
        givenName:
          $ref: '#/components/schemas/GivenName'
        additionalName:
          $ref: '#/components/schemas/AdditionalName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        dateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
        placeOfBirth:
          $ref: '#/components/schemas/PlaceOfBirth'
        description:
          type: string
          example: Member of the parliament
          description: How is the person politically exposed.
    ApplicationRequest:
      required:
        - amount
        - organization
        - applicant
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        promoCode:
          $ref: '#/components/schemas/PromoCode'
        term:
          $ref: '#/components/schemas/LoanTerm'
        purposeOfLoan:
          $ref: '#/components/schemas/PurposeOfLoan'
        organization:
          $ref: '#/components/schemas/ApplicationOrganization'
        applicant:
          $ref: '#/components/schemas/ApplicationApplicant'
        files:
          $ref: '#/components/schemas/UploadBase64Files'
        $type:
          type: string
          example: simple
          description: Note that `$type` must be `full` in order to send in further information.
    DateOfBirth:
      type: string
      example: '19701201'
      description: When the person was born. Expected format is `YYYYMMDD`
    FamilyName:
      type: string
      example: Smith
      description: 'Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.'
    FullApplicationApplicant:
      allOf:
        - $ref: '#/components/schemas/ApplicationApplicant'
        - type: object
          required:
            - $type
          properties:
            politicallyExposedPerson:
              $ref: '#/components/schemas/PoliticallyExposedPerson'
            dateOfBirth:
              $ref: '#/components/schemas/DateOfBirth'
            placeOfBirth:
              $ref: '#/components/schemas/PlaceOfBirth'
            $type:
              type: string
              example: full
              description: Note that `$type` must be `full` in order to send in further information.
    FullApplicationOrganization:
      allOf:
        - $ref: '#/components/schemas/ApplicationOrganization'
        - type: object
          required:
            - $type
          properties:
            numberOfEmployees:
              type: number
              example: 5
              description: Number of full time employees.
            currentMonthlyTurnover:
              type: string
              example: 100000
              description: |-
                ### Short
                Turnover for last month in national currency. 
                ### Abbreviation
                Expected to be the full amount, i.e. 1 000 implies 1 thousand in the local currency.
                ### Turnover currency code?
                Note that the currency is specified when issued API key.
            owners:
              type: array
              items:
                $ref: '#/components/schemas/OrganizationOwner'
            iban:
              type: string
              example: DE89 3704 0044 0532 0130 00
              description: |
                International Bank Account Number. The company bank account for receiving out payment. 
            $type:
              type: string
              example: full
              description: Note that `$type` must be `full` in order to send in further information.
    FullApplicationRequest:
      required:
        - amount
        - organization
        - applicant
        - $type
      allOf:
        - type: object
          properties:
            amount:
              $ref: '#/components/schemas/Amount'
            promoCode:
              $ref: '#/components/schemas/PromoCode'
            term:
              $ref: '#/components/schemas/LoanTerm'
            purposeOfLoan:
              $ref: '#/components/schemas/PurposeOfLoan'
            organization:
              $ref: '#/components/schemas/FullApplicationOrganization'
            applicant:
              $ref: '#/components/schemas/FullApplicationApplicant'
            files:
              $ref: '#/components/schemas/UploadBase64Files'
            politicallyExposedPersons:
              type: array
              items:
                $ref: '#/components/schemas/ApplicationPoliticallyExposedPerson'
            $type:
              type: string
              example: full
              description: Note that `$type` must be `full` in order to send in further information.
    GivenName:
      type: string
      example: Joe
      description: 'Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.'
    LoanTerm:
      type: number
      example: 12
      description: Loan term number of months
    NationalIdentificationNumber:
      type: string
      example: '197012012344'
      description: |
        ### Short
        The Tax / Fiscal ID of the person, e.g. the TIN in the US, CIF/NIF in Spain, [CPR](https://international.kk.dk/artikel/how-do-i-get-cpr-number) in Denmark, [Personal Identity Code](https://vrk.fi/en/personal-identity-code1) in Finland, or [personal number](https://skatteverket.se/privat/folkbokforing/personnummerochsamordningsnummer.4.3810a01c150939e893f18c29.html) in Sweden. 
        ### In the EU
        Some EU countries have a TIN. Some EU countries do not have a unique identification number. In that case the identification number will be some other type of information that can help identify the person.  
        The European commission has further information about [TIN](https://ec.europa.eu/taxation_customs/business/tax-cooperation-control/administrative-cooperation/tax-identification-numbers-tin_en).
    OrganizationOwner:
      properties:
        nationalIdentificationNumber:
          $ref: '#/components/schemas/NationalIdentificationNumber'
        givenName:
          $ref: '#/components/schemas/GivenName'
        additionalName:
          $ref: '#/components/schemas/AdditionalName'
        familyName:
          $ref: '#/components/schemas/FamilyName'
        ownerShipPercent:
          type: number
          example: 75
          description: Ownership in percent.
        dateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
        placeOfBirth:
          $ref: '#/components/schemas/PlaceOfBirth'
    PhoneNumber:
      type: string
      example: '+4688675309'
      description: |
        The phone number. Note that the phone number might not be sent as a number, see [E.161](https://en.wikipedia.org/wiki/E.161).  We prefer [E.164](https://en.wikipedia.org/wiki/E.164).
    PlaceOfBirth:
      type: string
      example: Stockholm
      description: Place of birth.
    PoliticallyExposedPerson:
      type: boolean
      example: false
      description: '"politically exposed person" (PEP) is a term describing someone who has been entrusted with a prominent public function. A PEP generally presents a higher risk for potential involvement in bribery and corruption by virtue of their position and the influence that they may hold.'
    PromoCode:
      type: string
      example: SOMECAMPAIGN123
      description: Promo code used to give the customer a discount or extra benefits.
    PurposeOfLoan:
      type: string
      example: I need to increase liquidity due to upcoming costs associated with participation in branch conference
      description: Company explains why they need the business loan
    UploadBase64File:
      required:
        - filename
        - base64Content
      properties:
        encodingFormat:
          type: array
          items:
            type: string
          example:
            - application/xml
            - https//api.a-company.com/transactions/v1
          description: |-
            Media type typically expressed using a MIME format (see [IANA](http://www.iana.org/assignments/media-types/media-types.xhtml) site and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
            Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry. In the case of organization specific file format with a specific purpose that could be a url to schema definition. For instance, transaction data format defined by `a-company` (see the example) that may or may not be hosted at that url.
        filename:
          type: string
          example: company-specific-format.xml
        base64Content:
          type: string
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
          description: Base64 encoded binary content.
    UploadBase64Files:
      type: array
      items:
        $ref: '#/components/schemas/UploadBase64File'
      description: 'Here you can supply additional files such as images, pdfs or company specify formats in order to get a faster qualification for your customer.'
  securitySchemes:
    JWT:
      description: |
        When you sign up for an account, you are given your first API client id and secret API key. Using these you can then
        connect to our identity provider to get a [JWT](https://jwt.io) issued.
      type: http
      scheme: bearer
      bearerFormat: JWT
